# Used for Blog 15 - Wal Size Experiments
require 'rainbow/refinement'
module WalLib
  using(Rainbow)
  def current_lsn
    res = DB.fetch('SELECT pg_current_wal_lsn() current, pg_current_wal_insert_lsn() AS current_insert').first
    if res[:current] != res[:current_insert]
      # puts "WARNING: current_lsn(#{res[:current]}) != current_insert_lsn(#{res[:current_insert]})"
    end
    res[:current_insert]
  end

  # return amount of WAL records generated by the given query
  def wal_movement(query = nil, flush: false, wal_info: true)
    start_lsn = current_lsn

    if block_given?
      raise 'Cannot have both query and block' if query

      puts 'Running block{}'.color(:lightblue)
      yield
    elsif query
      puts "Running query: #{query}".color(:lightblue)
      DB.run(query)
    else
      raise 'No block or query given'
    end

    end_lsn = current_lsn
    # requires pg16
    # movement = DB.fetch('SELECT pg_xlog_location_diff(?::text, ?::text) AS diff', start_lsn, end_lsn).first[:diff].round(0)
    movement = DB.fetch('SELECT ?::pg_lsn - ?::pg_lsn AS diff', end_lsn, start_lsn).first[:diff].round(0)
    puts "start: #{start_lsn}, end: #{end_lsn} diff: #{movement}"
    return if start_lsn == end_lsn

    DB.run('SELECT pg_switch_wal()') if flush
    info = nil
    if wal_info
      begin
        info = DB.fetch(<<~SQL, start_lsn, end_lsn).all
          SELECT
            resource_manager,
            record_type,
            count(*) AS count,
            sum(record_length) AS total_record_length,
            sum(main_data_length) AS total_main_data_length,
            sum(fpi_length) AS total_fpi_length
          FROM pg_get_wal_records_info(?::pg_lsn, ?::pg_lsn)
          GROUP BY resource_manager, record_type
          ORDER BY count(*) DESC, MAX(start_lsn)
        SQL
      rescue Sequel::DatabaseError => e
        puts "Database error occurred, wal info will be nil: #{e}"
      end
    end
    # requires pg16
    # puts DB.fetch('SELECT * FROM pg_get_wal_block_info(?::pg_lsn, ?::pg_lsn)', start_lsn, end_lsn).all
    [movement, info]
  end

  def title(str)
    puts "==================== #{str.red}  ===================="
  end
end
